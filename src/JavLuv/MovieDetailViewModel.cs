using Common;
using MovieInfo;
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace JavLuv
{
    public class MovieItem : ObservableObject
    {
        #region Constructors

        public MovieItem(MovieDetailViewModel parent, string movieFileName)
        {
            m_parent = parent;
            m_movieFileName = movieFileName;
        }

        #endregion

        #region Properties

        public Uri MovieURI 
        { 
            get 
            {
                UriBuilder builder = new UriBuilder("file://");
                builder.Path = m_movieFileName;
                return builder.Uri;
            } 
        }

        public string MovieName { get { return "Play " + Path.GetFileNameWithoutExtension(m_movieFileName); } }

        #endregion

        #region Commands

        #region Play Command

        private void PlayExecute()
        {
            try
            {
                System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo();
                psi.UseShellExecute = true;
                psi.FileName = m_movieFileName;
                System.Diagnostics.Process.Start(psi);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, TextManager.GetString("Text.ErrorPlayingMovie"));
            }
        }

        private bool CanPlayExecute()
        {
            return true;
        }

        public ICommand PlayCommand { get { return new RelayCommand(PlayExecute, CanPlayExecute); } }

        #endregion

        #endregion

        #region Private Members

        private MovieDetailViewModel m_parent;
        private string m_movieFileName;

        #endregion
    }

    public class MovieDetailViewModel : ObservableObject
    {
        #region Constructors

        public MovieDetailViewModel(MovieBrowserViewModel parent, MovieBrowserItemViewModel browserItem)
        {
            Logger.WriteInfo("Viewing details of movie " + browserItem.MovieData.Metadata.UniqueID.Value);
            m_parent = parent;
            m_browserItem = browserItem;
            m_movieData = m_browserItem.MovieData;
            if (String.IsNullOrEmpty(m_movieData.CoverFileName) == false)
            {
                m_loadImage = new CmdLoadImage(Path.Combine(m_movieData.Path, m_movieData.CoverFileName));
                m_loadImage.FinishedLoading += OnImageFinishedLoading;
                CommandQueue.ShortTask().Execute(m_loadImage, CommandOrder.First);
            }

            // Check to see if we need to retrieve movie resolution.
            if (MovieUtils.HasMovieRevolution(m_movieData.Metadata) == false && m_movieData.MovieFileNames.Count > 0)
            {
                m_getResolution = new CmdGetResolution(Path.Combine(m_movieData.Path, m_movieData.MovieFileNames[0]));
                m_getResolution.FinishedScanning += OnGetResolutionFinishedScanning;
                CommandQueue.LongTask().Execute(m_getResolution, CommandOrder.First);
            }

            // We need to explicitly scrape the original title because previous versions of JavLuv did not do this when
            // scraping the metadata originally.  In addition, metadata may have been generated by another program, which
            // may not have retrieved this data.
            if (m_parent.Parent.IsScanning == false && Settings.Get().Language != LanguageType.Japanese && String.IsNullOrEmpty(m_movieData.Metadata.OriginalTitle))
            {
                var getOrigTitle = new CmdGetOriginalTitle(ID, m_movieData);
                getOrigTitle.FinishedScraping += OnGetOriginalTitleFinished;
                CommandQueue.LongTask().Execute(getOrigTitle, ShowOriginalTitle ? CommandOrder.First : CommandOrder.Last);
            }

            // The actress viewer / editor has it's own viewmodel, since it's a slightly more complex control
            Actresses = new MovieDetailActressViewModel(this);
            ActressTextBoxVisible = Visibility.Collapsed;
        }

        #endregion

        #region Event Handlers

        private void OnImageFinishedLoading(object sender, System.EventArgs e)
        {
            Image = m_loadImage.Image;
            if (Image == null)
                Logger.WriteWarning("Unable to load image " + Path.Combine(m_movieData.Path, m_movieData.CoverFileName));
            m_loadImage.FinishedLoading -= OnImageFinishedLoading;
            m_loadImage = null;
        }

        private void OnGetResolutionFinishedScanning(object sender, EventArgs e)
        {
            Resolution = m_getResolution.Resolution;
        }

        private void OnGetOriginalTitleFinished(object sender, EventArgs e)
        {
            NotifyPropertyChanged("Title");
        }

        #endregion

        #region Properties

        public MovieBrowserViewModel Parent { get { return m_parent; } }

        public ImageSource Image
        {
            get { return m_image; }
            set
            {
                if (value != m_image)
                {
                    m_image = value;
                    NotifyPropertyChanged("Image");
                }
            }
        }

        public ObservableCollection<MovieItem> Movies
        {
            get
            {
                var movies = new ObservableCollection<MovieItem>();
                foreach (var fileName in m_movieData.MovieFileNames)
                    movies.Add(new MovieItem(this, Path.Combine(m_movieData.Path, fileName)));
                foreach (var extraFileName in m_movieData.ExtraMovieFileNames)
                    movies.Add(new MovieItem(this, Path.Combine(m_movieData.Path, extraFileName)));
                return movies;
            }
        }

        public System.Windows.Visibility SubtitlesVisible
        {
            get
            {
                if (m_movieData.SubtitleFileNames.Count == 0)
                    return System.Windows.Visibility.Hidden;
                return System.Windows.Visibility.Visible;
            }
        }

        public bool ShowOriginalTitle
        {
            get 
            {
                if (Settings.Get().Language == LanguageType.Japanese)
                    return false;
                return Settings.Get().ShowOriginalTitle; 
            }
            set
            {
                if (value != Settings.Get().ShowOriginalTitle)
                {
                    Settings.Get().ShowOriginalTitle = value;
                    NotifyPropertyChanged("Title");
                    NotifyPropertyChanged("ShowOriginalTitle");
                }
            }
        }

        public System.Windows.Visibility ShowOriginalTitleVisible
        {
            get
            {
                if (Settings.Get().Language == LanguageType.Japanese)
                    return System.Windows.Visibility.Hidden;
                return System.Windows.Visibility.Visible;
            }
        }

        public MovieBrowserItemViewModel BrowserItem { get { return m_browserItem; } }

        public MovieData MovieData { get { return m_movieData; } }

        public string Title
        {
            get 
            { 
                if (ShowOriginalTitle)
                    return m_movieData.Metadata.OriginalTitle; 
                else
                    return m_movieData.Metadata.Title;
            }
            set
            {
                if (ShowOriginalTitle)
                {
                    if (value != m_movieData.Metadata.OriginalTitle)
                    {
                        m_movieData.Metadata.OriginalTitle = value;
                        m_movieData.MetadataChanged = true;
                        NotifyPropertyChanged("Title");
                    }
                }
                else
                {
                    if (value != m_movieData.Metadata.Title)
                    {
                        m_movieData.Metadata.Title = value;
                        m_movieData.MetadataChanged = true;
                         NotifyPropertyChanged("Title");
                   }
                }
            }
        }

        public string ID
        {
            get { return m_movieData.Metadata.UniqueID.Value; }
            set
            {
                if (value != m_movieData.Metadata.UniqueID.Value)
                {
                    if (m_parent.Parent.Collection.MovieExists(value))
                    {
                        return;
                    }
                    m_movieData.Metadata.UniqueID.Value = value;
                    m_parent.Parent.Collection.RemoveMovie(m_movieData);
                    m_parent.Parent.Collection.AddMovie(m_movieData);
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("ID");
                }
            }
        }

        public string Released
        {
            get { return m_movieData.Metadata.Premiered; }
            set
            {
                if (value != m_movieData.Metadata.Premiered)
                {
                    m_movieData.Metadata.Premiered = value;
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Released");
                }
            }
        }

        public string Runtime
        {
            get { return m_movieData.Metadata.Runtime.ToString() + " " + TextManager.GetString("Text.Minutes"); }
            set
            {
                int val = Utilities.ParseInitialDigits(value);
                if (val != -1 && val != m_movieData.Metadata.Runtime)
                {                
                    m_movieData.Metadata.Runtime = val;
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Runtime");                 
                }
            }
        }

        public string Studio
        {
            get { return m_movieData.Metadata.Studio; }
            set
            {
                if (value != m_movieData.Metadata.Studio)
                {
                    m_movieData.Metadata.Studio = value;
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Studio");
                }
            }
        }

        public string Label
        {
            get { return m_movieData.Metadata.Label; }
            set
            {
                if (value != m_movieData.Metadata.Label)
                {
                    m_movieData.Metadata.Label = value;
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Label");
                }
            }
        }

        public string Director
        {
            get { return m_movieData.Metadata.Director; }
            set
            {
                if (value != m_movieData.Metadata.Director)
                {
                    m_movieData.Metadata.Director = value;
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Director");
                }
            }
        }

        public string Series
        {
            get { return m_movieData.Metadata.Series; }
            set
            {
                if (value != m_movieData.Metadata.Series)
                {
                    m_movieData.Metadata.Series = value;
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Series");
                }
            }
        }

        public int UserRating
        {
            get { return m_movieData.Metadata.UserRating; }
            set
            {
                if (value != m_movieData.Metadata.UserRating)
                {
                    m_movieData.Metadata.UserRating = value;
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("UserRating");
                }
            }
        }

        public string Genres
        {
            get 
            {
                return MovieUtils.GenresToString(m_movieData);
            }
            set
            {
                if (MovieUtils.StringToGenres(m_movieData, value))
                {
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Genres");
                }
            }
        }

        public string Actors
        {
            get
            {
                return MovieUtils.ActorsToString(m_movieData.Metadata.Actors);
            }
            set
            {
                var actors = m_movieData.Metadata.Actors;
                if (MovieUtils.StringToActors(value, ref actors))
                {
                    m_movieData.Metadata.Actors = actors;
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Actors");
                    Actresses = new MovieDetailActressViewModel(this);
                    NotifyPropertyChanged("Actresses");
                }
            }
        }

        public MovieDetailActressViewModel Actresses { get; private set; }

        public Visibility ActressViewerVisible 
        {
            get { return m_actressViewerVisible; }
            set
            {
                if (m_actressViewerVisible != value)
                {
                    m_actressViewerVisible = value;
                    NotifyPropertyChanged("ActressViewerVisible");
                }
            }
        }

        public Visibility ActressTextBoxVisible
        {
            get { return m_actressTextBoxVisible; }
            set
            {
                if (m_actressTextBoxVisible != value)
                {
                    m_actressTextBoxVisible = value;
                    NotifyPropertyChanged("ActressTextBoxVisible");
                }
            }
        }

        public bool ActressEditing
        {
            get
            {
                return m_actressEditing;
            }
            set
            {
                if (m_actressEditing != value)
                {
                    m_actressEditing = value;
                    NotifyPropertyChanged("ActressEditing");
                    if (m_actressEditing)
                    {
                        ActressViewerVisible = Visibility.Collapsed;
                        ActressTextBoxVisible = Visibility.Visible;
                    }
                    else
                    {
                        ActressViewerVisible = Visibility.Visible;
                        ActressTextBoxVisible = Visibility.Collapsed;
                    }
                }
            }
        }

        public string Resolution
        {
            get 
            { 
                return MovieUtils.GetMovieResolution(m_movieData.Metadata); 
            }
            set
            {
                string prevResolution = MovieUtils.GetMovieResolution(m_movieData.Metadata);
                if (value != prevResolution)
                {
                    MovieUtils.SetMovieResolution(m_movieData, value);
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Resolution");
                }
            }
        }

        public bool HardSubtitled
        {
            get
            {
                return MovieUtils.IsHardSubtitled(m_movieData);
            }
            set
            {
                bool isHardSubtitled = MovieUtils.IsHardSubtitled(m_movieData);
                if (isHardSubtitled != value)
                {
                    MovieUtils.SetHardSubtitled(m_movieData, value);
                    NotifyPropertyChanged("HardSubtitled");
                }
            }
        }

        public string Notes
        {
            get { return m_movieData.Metadata.Plot; }
            set
            {
                if (value != m_movieData.Metadata.Plot)
                {
                    m_movieData.Metadata.Plot = value;
                    m_movieData.MetadataChanged = true;
                    NotifyPropertyChanged("Notes");
                }
            }
        }

        public string FolderPath
        {
            get { return m_movieData.Path; }
        }

        #endregion

        #region Commands

        #region Paste Command

        private void PasteExecute()
        {
            var image = Clipboard.GetImage() as BitmapSource;
            string fileName = Path.ChangeExtension(Guid.NewGuid().ToString(), ".png");
            string fileNamePath = Path.Combine(Utilities.GetActressImageFolder(), fileName);
            using (FileStream stream = new FileStream(fileNamePath, FileMode.Create))
            {
                PngBitmapEncoder encoder = new PngBitmapEncoder();
                encoder.Interlace = PngInterlaceOption.Off;
                encoder.Frames.Add(BitmapFrame.Create(image));
                encoder.Save(stream);
            }
            m_movieData.CoverFileName = fileName;
            m_loadImage = new CmdLoadImage(Path.Combine(m_movieData.Path, m_movieData.CoverFileName));
            m_loadImage.FinishedLoading += OnImageFinishedLoading;
            CommandQueue.ShortTask().Execute(m_loadImage, CommandOrder.First);
        }

        private bool CanPasteExecute()
        {
            return Clipboard.ContainsImage();
        }

        public ICommand PasteCommand { get { return new RelayCommand(PasteExecute, CanPasteExecute); } }

        #endregion

        #region Open Folder Command

        private void OpenFolderExecute()
        {
            try
            {
                if (m_movieData.MovieFileNames.Count > 0)
                {
                    string p = Path.Combine(m_movieData.Path, m_movieData.MovieFileNames[0]);
                    string args = string.Format("/e, /select, \"{0}\"", p);
                    ProcessStartInfo psi = new ProcessStartInfo();
                    psi.FileName = "explorer";
                    psi.Arguments = args;
                    Process.Start(psi);
                }
                else
                {
                    System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo();
                    psi.UseShellExecute = true;
                    psi.FileName = m_movieData.Path;
                    psi.Verb = "open";
                    System.Diagnostics.Process.Start(psi);
                }
            }
            catch(Exception)
            {
            }
        }

        private bool CanOpenFolderExecute()
        {
            return true;
        }

        public ICommand OpenFolderCommand { get { return new RelayCommand(OpenFolderExecute, CanOpenFolderExecute); } }

        #endregion

        #region Import Subtitles Command

        private void ImportSubtitlesExecute()
        {
            if (Parent.ImportSubtitles(m_movieData))
                NotifyPropertyChanged("SubtitlesVisible");
        }

        private bool CanImportSubtitlesExecute()
        {
            return Parent.Parent.IsReadOnlyMode == false;
        }

        public ICommand ImportSubtitlesCommand { get { return new RelayCommand(ImportSubtitlesExecute, CanImportSubtitlesExecute); } }

        #endregion

        #region Import Cover Image Command

        private void ImportCoverImageExecute()
        {
            if (Parent.ImportCoverImage(m_movieData))
            {
                string fullImageFileName = Path.Combine(m_movieData.Path, m_movieData.CoverFileName);
                ImageCache.Get().Delete(fullImageFileName);
                m_loadImage = new CmdLoadImage(fullImageFileName);
                m_loadImage.FinishedLoading += OnImageFinishedLoading;
                CommandQueue.ShortTask().Execute(m_loadImage, CommandOrder.First);
            }
        }

        private bool CanImportCoverImageExecute()
        {
            return Parent.Parent.IsReadOnlyMode == false;
        }

        public ICommand ImportCoverImageCommand { get { return new RelayCommand(ImportCoverImageExecute, CanImportCoverImageExecute); } }

        #endregion

        #region Copy Title And Metadata Command

        private void CopyTitleAndMetadataExecute()
        {
            string text = String.Empty;
            text += "[" + ID + "] ";
            text += Title + "\n";
            if (Settings.Get().Language == LanguageType.English)
                text += m_movieData.Metadata.OriginalTitle + "\n";
            text += "\n\n";
            text += CopyLabel("Text.ID", ID);
            text += CopyLabel("Text.Released", Released);
            text += CopyLabel("Text.Runtime", Runtime);
            text += CopyLabel("Text.Studio", Studio);
            text += CopyLabel("Text.Label", Label);
            text += CopyLabel("Text.Director", Director);
            text += CopyLabel("Text.Genres", Genres);
            text += CopyLabel("Text.Actresses", Actors) + "\n";
            text += CopyLabel("Text.Resolution", Resolution) + "\n";
            Utilities.SetClipboardText(text);
        }

        private string CopyLabel(string textID, string text)
        {
            string returnValue = TextManager.GetString(textID) + " ";
            if (String.IsNullOrEmpty(text))
                returnValue += "N/A";
            else
                returnValue += text;
            returnValue += "\n";
            return returnValue;
        }

        private bool CanCopyTitleAndMetadataExecute()
        {
            return true;
        }

        public ICommand CopyTitleAndMetadataCommand { get { return new RelayCommand(CopyTitleAndMetadataExecute, CanCopyTitleAndMetadataExecute); } }


        #endregion

        #endregion

        #region Private Members

        private MovieBrowserViewModel m_parent;
        private MovieData m_movieData;
        private MovieBrowserItemViewModel m_browserItem;
        private ImageSource m_image;
        private CmdLoadImage m_loadImage;
        private CmdGetResolution m_getResolution;
        private bool m_actressEditing = false;
        private Visibility m_actressViewerVisible = Visibility.Visible;
        private Visibility m_actressTextBoxVisible = Visibility.Visible;

        #endregion
    }
}
